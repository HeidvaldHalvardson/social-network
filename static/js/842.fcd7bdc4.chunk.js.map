{"version":3,"file":"static/js/842.fcd7bdc4.chunk.js","mappings":"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","sources":["components/pages/Profile/ProfileStatus/ProfileStatus.jsx","webpack://social-network/./src/components/pages/Profile/ProfileInfo/ProfileInfo.module.css?a8d8","components/pages/Profile/ProfileInfo/ProfileInfo.jsx","components/pages/Profile/MyPosts/Post/Post.jsx","components/pages/Profile/MyPosts/MyPosts.jsx","components/pages/Profile/MyPosts/MyPostsContainer.jsx","components/pages/Profile/Profile.jsx","components/pages/Profile/ProfileContainer.jsx","webpack://social-network/./src/components/pages/customs/CustomTextarea/CustomTextarea.module.css?25bd","webpack://social-network/./src/components/pages/customs/ErrorMessage/ErrorMessage.module.css?e0b3","components/pages/customs/ErrorMessage/ErrorMessage.jsx","components/pages/customs/CustomTextarea/CustomTextarea.jsx"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\r\n\r\nconst ProfileStatus = (props) => {\r\n\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [status, setStatus] = useState(props.status);\r\n\r\n  useEffect( () => {\r\n    setStatus(props.status)\r\n  }, [props.status])\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true)\r\n  }\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n  }\r\n\r\n  const onStatusChange = (evt) => {\r\n    setStatus(evt.currentTarget.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {!editMode\r\n        ?\r\n        <div>\r\n          <span onClick={activateEditMode}>{props.status || \"what's new?\"}</span>\r\n        </div>\r\n        :\r\n        <div>\r\n          <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status} />\r\n        </div>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProfileStatus;","// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"ProfileInfo_contact__TWnE1\"};","import React from \"react\";\r\nimport Preloader from \"../../customs/Preloader/Preloader\";\r\nimport ProfileStatus from \"../ProfileStatus/ProfileStatus\";\r\nimport userPhoto from \"../../../../assects/images/user.jpg\";\r\nimport style from \"./ProfileInfo.module.css\";\r\n\r\nconst ProfileInfo = (props) => {\r\n\r\n  if (!props.profile) {\r\n    return <Preloader/>\r\n  }\r\n\r\n  const onPhotoSelected = (evt) => {\r\n    if (evt.target.files.length) {\r\n      props.savePhoto(evt.target.files[0])\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <img src={props.profile.photos.large !== null ? props.profile.photos.large : userPhoto} width={200} height={200}\r\n             alt=\"\"/>\r\n        {props.isOwner && <input type={\"file\"} onChange={onPhotoSelected}/>}\r\n\r\n        <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n\r\n        <div>\r\n          <p>\r\n            <b>Name:</b> {props.profile.fullName}\r\n          </p>\r\n          <p>\r\n            <b>Looking for a job:</b> {props.profile.lookingForAJob ? \"yes\" : \"no\"}\r\n          </p>\r\n          {props.profile.lookingForAJob &&\r\n            <p>\r\n              <b>My professional skills:</b> {props.profile.lookingForAJobDescription ? \"yes\" : \"no\"}\r\n            </p>\r\n          }\r\n          <p>\r\n            <b>About me:</b> {props.profile.aboutMe}\r\n          </p>\r\n          <p>\r\n            <b>Contacts:</b>\r\n            <ul>\r\n              {Object.keys(props.profile.contacts).map(key => {\r\n                return <Contact key={key} contactTitle={key} contactValue={props.profile.contacts[key]}/>\r\n              })}\r\n            </ul>\r\n          </p>\r\n        </div>\r\n\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nconst Contact = (props) => {\r\n  if (props.contactValue) {\r\n    return (\r\n      <li className={style.contact}>\r\n        <b>{props.contactTitle}:</b> {props.contactValue}\r\n      </li>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\n\r\nconst Post = ({children}) => {\r\n  return (\r\n    <li>\r\n      {children}\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport Post from \"./Post/Post\";\r\nimport {Field, Form, Formik} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {CustomTextarea} from \"../../customs/CustomTextarea/CustomTextarea\";\r\n\r\nconst validationSchema = Yup.object({\r\n  newPost: Yup.string()\r\n    .required('Field is required')\r\n    .max(100, `Max length is 100 symbols`)\r\n})\r\n\r\nconst AddPostForm = (props) => {\r\n\r\n  const submit = (values, {setSubmitting, resetForm}) => {\r\n    props.addPost(values.newPost);\r\n    resetForm({values: ''})\r\n    setSubmitting(false);\r\n  }\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{newPost: ''}}\r\n      onSubmit={submit}\r\n      validateOnBlur={false}\r\n      validationSchema={validationSchema}\r\n    >\r\n      {({isSubmitting, errors, isValid}) => (\r\n\r\n        <Form>\r\n          <div>\r\n            <Field as={CustomTextarea} name=\"newPost\" placeholder=\"Enter your post\" errors={errors}/>\r\n          </div>\r\n          <button type=\"submit\" disabled={(isSubmitting || !isValid)}>\r\n            Add post\r\n          </button>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  )\r\n}\r\n\r\nconst MyPosts = React.memo((props) => {\r\n  const postElement =\r\n    [...props.postData]\r\n      .reverse()\r\n      .map(item => <Post>{item.message}</Post>)\r\n\r\n  return (\r\n    <>\r\n      <h3>My posts</h3>\r\n      <div>\r\n        <AddPostForm addPost={props.addPost}/>\r\n        <ul>\r\n          {postElement}\r\n        </ul>\r\n      </div>\r\n    </>\r\n  )\r\n})\r\n\r\nexport default MyPosts;","import {addPost} from \"../../../../redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToPropsFactory = (state) => {\r\n  return {\r\n    postData: state.profilePage.postData,\r\n    newPostText: state.profilePage.newPostText,\r\n  }\r\n}\r\n\r\nconst mapDispatchToPropsFactory = (dispatch) => {\r\n  return {\r\n    addPost: (newPostText) => {\r\n      dispatch(addPost(newPostText))\r\n    }\r\n  }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToPropsFactory, mapDispatchToPropsFactory)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n  return (\r\n    <>\r\n      <ProfileInfo isOwner={props.isOwner} profile={props.profile} status={props.status} updateStatus={props.updateStatus} savePhoto={props.savePhoto}/>\r\n      <MyPostsContainer />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {addPost, getStatus, getUserProfile, savePhoto, updateStatus} from \"../../../redux/profileReducer\";\r\nimport {compose} from \"redux\";\r\nimport {withRouter} from \"../../../App\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n  refreshProfile = () => {\r\n    let userId = this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authorisedUserId;\r\n    }\r\n    this.props.getUserProfile(userId);\r\n    this.props.getStatus(userId);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n      this.refreshProfile();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Profile isOwner={!this.props.match.params.userId} {...this.props} profile={this.props.profile} status={this.props.status} savePhoto={this.props.savePhoto}/>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorisedUserId: state.auth.userId,\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, {\r\n    addPost,\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus,\r\n    savePhoto\r\n  }),\r\n  withRouter\r\n)(ProfileContainer)\r\n","// extracted by mini-css-extract-plugin\nexport default {\"fieldControl\":\"CustomTextarea_fieldControl__qQVHB\",\"fieldError\":\"CustomTextarea_fieldError__9NTyF\"};","// extracted by mini-css-extract-plugin\nexport default {\"errors\":\"ErrorMessage_errors__mHYok\"};","import React from \"react\";\r\nimport style from \"./ErrorMessage.module.css\";\r\n\r\nconst ErrorMessage = ({children}) => {\r\n  return (\r\n    <p className={style.errors}>{children}</p>\r\n  )\r\n}\r\n\r\nexport default ErrorMessage;","import React from \"react\";\r\nimport style from \"./CustomTextarea.module.css\";\r\nimport ErrorMessage from \"../ErrorMessage/ErrorMessage\";\r\n\r\nexport const CustomTextarea = ({errors, ...props}) => {\r\n  return (\r\n    <>\r\n      <textarea className={`${style.fieldControl} ${errors[props.name] ? style.fieldError : ''}`} {...props}/>\r\n      <ErrorMessage>{errors[props.name]}</ErrorMessage>\r\n    </>\r\n  )\r\n}\r\n\r\nexport const CustomInput = ({errors, ...props}) => {\r\n  return (\r\n    <>\r\n      <input className={`${style.fieldControl} ${errors[props.name] ? style.fieldError : ''}`} {...props}/>\r\n      <ErrorMessage>{errors[props.name]}</ErrorMessage>\r\n    </>\r\n  )\r\n}\r\n"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","evt","currentTarget","value","autoFocus","onBlur","updateStatus","onClick","Contact","contactValue","className","style","contactTitle","profile","Preloader","src","photos","large","userPhoto","width","height","alt","isOwner","type","target","files","length","savePhoto","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Object","keys","contacts","map","key","children","validationSchema","Yup","newPost","required","max","AddPostForm","initialValues","onSubmit","values","setSubmitting","resetForm","addPost","validateOnBlur","isSubmitting","errors","isValid","as","CustomTextarea","name","placeholder","disabled","React","postElement","postData","reverse","item","message","connect","state","profilePage","newPostText","dispatch","MyPosts","ProfileContainer","refreshProfile","userId","match","params","authorisedUserId","getUserProfile","getStatus","this","prevProps","prevState","snapshot","compose","auth","isAuth","withRouter","CustomInput"],"sourceRoot":""}