{"version":3,"file":"static/js/319.b98013f9.chunk.js","mappings":"4MAQMA,EAAmBC,EAAAA,GAAW,CAClCC,MAAOD,EAAAA,KACJC,MAAM,yBACNC,SAAS,6BACZC,SAAUH,EAAAA,KACPI,QAAQ,iBAAkB,uDAC1BF,SAAS,0BAGRG,EAAY,SAACC,GAOjB,OACE,SAAC,KAAD,CACEC,cAAe,CAAEN,MAAO,GAAIE,SAAU,GAAIK,YAAY,EAAOC,QAAS,IACtEV,iBAAkBA,EAClBW,SATW,SAACC,EAAD,GAA4C,IAAhCC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UACtCP,EAAMI,SAASC,EAAQE,GACvBD,GAAc,EACjB,EAGC,SAKG,gBAAGE,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQC,EAAzB,EAAyBA,QAASC,EAAlC,EAAkCA,OAAlC,OACC,UAAC,KAAD,YACE,0BACE,SAAC,KAAD,CAAOC,GAAIC,EAAAA,EAAaC,KAAK,QAAQC,KAAK,QAAQC,YAAY,QAAQP,OAAQA,OAEhF,0BACE,SAAC,KAAD,CAAOG,GAAIC,EAAAA,EAAaC,KAAK,WAAWC,KAAK,WAAWC,YAAY,WAAWP,OAAQA,OAEzF,2BACGT,EAAMiB,aACP,4BACE,gBAAKC,IAAKlB,EAAMiB,WAAaE,IAAI,MACjC,SAAC,KAAD,CAAOP,GAAIC,EAAAA,EAAaC,KAAK,OAAOC,KAAK,UAAUC,YAAY,GAAGP,OAAQA,OAE3EE,MAEH,8BACE,SAAC,KAAD,CAAOG,KAAK,WAAWC,KAAK,gBAC5B,8CAEF,mBAAQD,KAAK,SAASM,SAAUZ,IAAiBE,EAAjD,qBApBH,GA2BN,EAsBD,WAAeW,EAAAA,EAAAA,KALS,SAACC,GAAD,MAAY,CAClCL,WAAYK,EAAMC,KAAKN,WACvBO,OAAQF,EAAMC,KAAKC,OAFG,GAKgB,CAACC,MAAAA,EAAAA,IAAzC,EApBc,SAACzB,GAIb,OAAIA,EAAMwB,QACD,SAAC,KAAD,CAAUE,GAAG,cAGpB,iCACE,mCACA,SAAC3B,EAAD,CAAWK,SATE,SAACuB,EAAUpB,GAC1BP,EAAMyB,MAAME,EAAShC,MAAOgC,EAAS9B,SAAU8B,EAASzB,WAAYyB,EAASxB,QAAUI,EACxF,EAOkCU,WAAYjB,EAAMiB,eAGtD,G,sGCvED,G,QAA+B,sCAA/B,EAAiF,mCCAjF,EAAyB,6B,SCQzB,EANqB,SAAC,GAAgB,IAAfW,EAAc,EAAdA,SACrB,OACE,cAAGC,UAAWC,EAAd,SAA6BF,GAEhC,E,0BCHYG,EAAiB,SAAC,GAAwB,IAAvBtB,EAAsB,EAAtBA,OAAWT,GAAW,YACpD,OACE,iCACE,6BAAU6B,UAAS,UAAKC,EAAL,YAA2BrB,EAAOT,EAAMe,MAAQe,EAAmB,KAAU9B,KAChG,SAAC,EAAD,UAAeS,EAAOT,EAAMe,UAGjC,EAEYF,EAAc,SAAC,GAAwB,IAAvBJ,EAAsB,EAAtBA,OAAWT,GAAW,YACjD,OACE,iCACE,0BAAO6B,UAAS,UAAKC,EAAL,YAA2BrB,EAAOT,EAAMe,MAAQe,EAAmB,KAAU9B,KAC7F,SAAC,EAAD,UAAeS,EAAOT,EAAMe,UAGjC,C","sources":["components/pages/Login/Login.jsx","webpack://social-network/./src/components/pages/customs/CustomTextarea/CustomTextarea.module.css?25bd","webpack://social-network/./src/components/pages/customs/ErrorMessage/ErrorMessage.module.css?e0b3","components/pages/customs/ErrorMessage/ErrorMessage.jsx","components/pages/customs/CustomTextarea/CustomTextarea.jsx"],"sourcesContent":["import React from \"react\";\r\nimport {Field, Form, Formik} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {CustomInput} from \"../customs/CustomTextarea/CustomTextarea\"\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../../redux/authReducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nconst validationSchema = Yup.object({\r\n  email: Yup.string()\r\n    .email('Invalid email address')\r\n    .required('Email address is required'),\r\n  password: Yup.string()\r\n    .matches(/^[a-zA-Z0-9]+$/, 'Password can only contain Latin letters and numbers')\r\n    .required('Password is required'),\r\n})\r\n\r\nconst LoginForm = (props) => {\r\n\r\n  const submit = (values,  { setSubmitting, setStatus }) => {\r\n      props.onSubmit(values, setStatus);\r\n      setSubmitting(false);\r\n  }\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{ email: '', password: '', rememberMe: false, captcha: '' }}\r\n      validationSchema={validationSchema}\r\n      onSubmit={submit}\r\n    >\r\n      {({ isSubmitting, errors, isValid, status }) => (\r\n        <Form>\r\n          <div>\r\n            <Field as={CustomInput} type=\"email\" name=\"email\" placeholder=\"Email\" errors={errors}/>\r\n          </div>\r\n          <div>\r\n            <Field as={CustomInput} type=\"password\" name=\"password\" placeholder=\"Password\" errors={errors}/>\r\n          </div>\r\n          <div>\r\n            {props.captchaUrl &&\r\n            <div>\r\n              <img src={props.captchaUrl}  alt=\"\"/>\r\n              <Field as={CustomInput} type=\"text\" name=\"captcha\" placeholder=\"\" errors={errors} />\r\n            </div>}\r\n            {status}\r\n          </div>\r\n          <label>\r\n            <Field type=\"checkbox\" name=\"rememberMe\" />\r\n            <span>remember me</span>\r\n          </label>\r\n          <button type=\"submit\" disabled={isSubmitting || !isValid}>\r\n            Login\r\n          </button>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  )\r\n}\r\n\r\nconst Login = (props) => {\r\n  const onSubmit = (formData, setStatus) => {\r\n    props.login(formData.email, formData.password, formData.rememberMe, formData.captcha , setStatus)\r\n  }\r\n  if (props.isAuth) {\r\n    return <Navigate to=\"/profile\" />\r\n  }\r\n  return (\r\n    <>\r\n      <h1>Login</h1>\r\n      <LoginForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n    </>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  captchaUrl: state.auth.captchaUrl,\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);","// extracted by mini-css-extract-plugin\nexport default {\"fieldControl\":\"CustomTextarea_fieldControl__qQVHB\",\"fieldError\":\"CustomTextarea_fieldError__9NTyF\"};","// extracted by mini-css-extract-plugin\nexport default {\"errors\":\"ErrorMessage_errors__mHYok\"};","import React from \"react\";\r\nimport style from \"./ErrorMessage.module.css\";\r\n\r\nconst ErrorMessage = ({children}) => {\r\n  return (\r\n    <p className={style.errors}>{children}</p>\r\n  )\r\n}\r\n\r\nexport default ErrorMessage;","import React from \"react\";\r\nimport style from \"./CustomTextarea.module.css\";\r\nimport ErrorMessage from \"../ErrorMessage/ErrorMessage\";\r\n\r\nexport const CustomTextarea = ({errors, ...props}) => {\r\n  return (\r\n    <>\r\n      <textarea className={`${style.fieldControl} ${errors[props.name] ? style.fieldError : ''}`} {...props}/>\r\n      <ErrorMessage>{errors[props.name]}</ErrorMessage>\r\n    </>\r\n  )\r\n}\r\n\r\nexport const CustomInput = ({errors, ...props}) => {\r\n  return (\r\n    <>\r\n      <input className={`${style.fieldControl} ${errors[props.name] ? style.fieldError : ''}`} {...props}/>\r\n      <ErrorMessage>{errors[props.name]}</ErrorMessage>\r\n    </>\r\n  )\r\n}\r\n"],"names":["validationSchema","Yup","email","required","password","matches","LoginForm","props","initialValues","rememberMe","captcha","onSubmit","values","setSubmitting","setStatus","isSubmitting","errors","isValid","status","as","CustomInput","type","name","placeholder","captchaUrl","src","alt","disabled","connect","state","auth","isAuth","login","to","formData","children","className","style","CustomTextarea"],"sourceRoot":""}